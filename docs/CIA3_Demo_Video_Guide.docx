# CIA3 Microservices Demo Video Guide

## Project Overview
**Student Name:** [Your Name]  
**Course:** [Course Code]  
**Project:** PetCare Management System - Microservices Architecture  
**GitHub Repository:** https://github.com/vidyashreebv/petcare-cia3  
**Demo Duration:** 8-12 minutes  

---

## üé¨ Demo Video Structure

### 1. Introduction & Domain Overview (1-2 minutes)

**Script to Follow:**
- "Welcome to my CIA3 microservices demonstration"
- "I've developed a **PetCare Management System** using microservices architecture"
- "This system consists of 3 independent microservices:"

**Microservices Implemented:**
1. **Pet Service (Port 3001)**
   - Manages pet profiles and owner information
   - Handles pet registration, updates, and deletion
   - Stores pet details: name, type, age, owner contact

2. **Appointment Service (Port 3002)**
   - Handles veterinary appointment scheduling
   - Manages appointment status and scheduling
   - Links pets with veterinarians for appointments

3. **Vet Service (Port 3003)**
   - Manages veterinarian profiles and specializations
   - Stores vet information: name, specialization, contact details
   - Provides available vets for appointment booking

**What to Show:**
- GitHub repository structure
- Project file organization
- Technology stack overview

---

### 2. Architecture & Technology Stack (1-2 minutes)

**Technology Stack Demonstration:**

**Backend Framework:**
- Node.js with Express.js framework
- RESTful API implementation
- JSON data exchange format

**Database:**
- Google Firestore (NoSQL database)
- Real-time data synchronization
- Cloud-based storage solution

**Containerization:**
- Docker for containerization
- Docker Compose for multi-container orchestration
- Isolated service environments

**Frontend:**
- HTML5, CSS3, JavaScript
- Responsive web design
- Modern UI/UX implementation

**Deployment:**
- ngrok for public access
- Cloud deployment capability
- Container orchestration ready

**What to Show:**
- VS Code file structure
- docker-compose.yml configuration
- Package.json dependencies
- Dockerfile examples

---

### 3. Microservice Development - CRUD Operations (3-4 minutes)

#### A. Pet Service Demonstration

**API Endpoints to Show:**
```
GET    /pets           - List all pets
POST   /pets           - Create new pet
GET    /pets/:id       - Get specific pet
PUT    /pets/:id       - Update pet information
DELETE /pets/:id       - Delete pet
```

**Demo Steps:**
1. Open browser to `http://localhost:3001/pets`
2. Show JSON response with pet data
3. Demonstrate POST request (create new pet)
4. Show PUT request (update existing pet)
5. Demonstrate DELETE operation

#### B. Appointment Service Demonstration

**API Endpoints to Show:**
```
GET    /appointments           - List all appointments
POST   /appointments           - Book new appointment
GET    /appointments/:id       - Get specific appointment
PUT    /appointments/:id       - Update appointment
DELETE /appointments/:id       - Cancel appointment
```

**Demo Steps:**
1. Access `http://localhost:3002/appointments`
2. Show appointment listing with JSON format
3. Create new appointment via POST
4. Update appointment status
5. Demonstrate appointment cancellation

#### C. Vet Service Demonstration

**API Endpoints to Show:**
```
GET    /vets           - List all veterinarians
POST   /vets           - Add new veterinarian
GET    /vets/:id       - Get specific vet
PUT    /vets/:id       - Update vet profile
DELETE /vets/:id       - Remove veterinarian
```

**Demo Steps:**
1. Navigate to `http://localhost:3003/vets`
2. Display vet profiles in JSON
3. Add new veterinarian
4. Update specialization information
5. Show vet deletion process

---

### 4. Database Integration (1 minute)

**Firebase Console Demonstration:**

**What to Show:**
1. **Open Firebase Emulator:** `http://localhost:4000`
2. **Navigate to Firestore section**
3. **Show Collections:**
   - `pets` collection with sample documents
   - `appointments` collection with booking data
   - `vets` collection with veterinarian profiles

**Key Points to Mention:**
- Real-time data synchronization
- NoSQL document structure
- Automatic scaling capabilities
- Cloud-based reliability

**Demo Actions:**
- Add new document via console
- Show immediate reflection in application
- Demonstrate data relationships between collections

---

### 5. Containerization with Docker (1-2 minutes)

**Docker Implementation Demonstration:**

**Files to Show:**
1. **Individual Dockerfiles** for each service
2. **docker-compose.yml** orchestration file
3. **Container networking** configuration

**Terminal Commands to Execute:**
```bash
# Show running containers
docker-compose ps

# Display container logs
docker-compose logs

# Show container resource usage
docker stats

# Demonstrate container restart
docker-compose restart pet-service
```

**Key Features to Highlight:**
- Service isolation
- Container communication
- Environment consistency
- Scalability preparation
- Production-ready deployment

---

### 6. Frontend Application Demo (2-3 minutes)

**Live Application Demonstration:**

**Pages to Navigate:**
1. **Overview/Dashboard Page**
   - Show system statistics
   - Display service health status
   - Overview of total pets, appointments, vets

2. **Pets Management Page**
   - Add new pet with owner information
   - Edit existing pet details
   - Delete pet records
   - Show responsive design

3. **Appointments Page** ‚≠ê (Focus Area)
   - **Pet Selection Dropdown** - populated from Pet Service
   - **Vet Selection Dropdown** - populated from Vet Service
   - **Auto-fill Functionality** - owner info when pet selected
   - **Date/Time Scheduling**
   - **Service Type Selection**
   - **Successful Booking Process**

4. **Veterinarians Page**
   - Add new veterinarian profiles
   - Update specializations
   - Manage vet availability

**Key Features to Demonstrate:**
- **Real-time Data Updates** - changes reflect immediately
- **Cross-Service Communication** - data from multiple services
- **User-Friendly Interface** - professional design
- **Error Handling** - validation and user feedback
- **Responsive Design** - mobile and desktop compatibility

---

### 7. Cloud Deployment (1 minute)

**Public Deployment Demonstration:**

**What to Show:**
1. **ngrok Terminal** - showing public URL generation
2. **Public URL Access** - demonstrate external accessibility
3. **Different Device Access** - show from phone/another computer
4. **Load Testing** - multiple concurrent users

**Deployment Options to Mention:**
- Current: ngrok for development/demo
- Production Ready: AWS, Google Cloud, Azure
- Kubernetes orchestration capability
- CI/CD pipeline integration ready

**Key Points:**
- 24/7 availability potential
- Global accessibility
- Scalable infrastructure
- Production deployment ready

---

## üìã Pre-Recording Checklist

### Technical Setup:
- [ ] Restart all Docker containers: `docker-compose restart`
- [ ] Clear browser cache (Cmd+Shift+R)
- [ ] Test all API endpoints
- [ ] Verify database connectivity
- [ ] Check ngrok public URL accessibility
- [ ] Prepare sample data for demonstration

### Recording Equipment:
- [ ] Screen recording software (QuickTime/OBS Studio)
- [ ] Good quality microphone/headset
- [ ] 1080p minimum resolution
- [ ] Stable internet connection
- [ ] Multiple browser tabs prepared

### Content Preparation:
- [ ] Practice demo script
- [ ] Prepare sample data inputs
- [ ] Test error scenarios
- [ ] Check all URLs and endpoints
- [ ] Verify frontend functionality

---

## üéØ Key Points to Emphasize

### Technical Excellence:
1. **"Complete CRUD operations implemented across all 3 microservices"**
2. **"Each service runs independently in Docker containers"**
3. **"Services communicate through well-defined REST APIs"**
4. **"Real-time database synchronization with Firestore"**
5. **"Production-ready containerized deployment"**

### Business Value:
1. **"Scalable microservices architecture"**
2. **"Modern web technologies implementation"**
3. **"User-friendly interface design"**
4. **"Real-world application scenario"**
5. **"Cloud deployment ready"**

### Project Management:
1. **"Version control with Git/GitHub"**
2. **"Comprehensive documentation"**
3. **"Modular development approach"**
4. **"Industry best practices followed"**

---

## üìä Demo Recording Tips

### Audio Guidelines:
- Speak clearly and at moderate pace
- Explain each action before performing it
- Use professional terminology
- Maintain enthusiasm and confidence

### Visual Guidelines:
- Keep browser address bars visible
- Use developer tools to show API calls
- Highlight important elements on screen
- Demonstrate responsive design

### Content Guidelines:
- Start with big picture, then details
- Show both success and error scenarios
- Explain technical decisions made
- Connect features to business requirements

---

## üìÑ Document Submission Requirements

### Video Deliverables:
- [ ] 8-12 minute demo video (MP4 format)
- [ ] Clear audio and 1080p video quality
- [ ] Demonstrates all required features
- [ ] Shows live application functionality

### Written Documentation:
- [ ] Word document format (not PDF)
- [ ] Architecture diagrams included
- [ ] API documentation
- [ ] Deployment instructions
- [ ] Screenshots from demo video

### Technical Deliverables:
- [ ] GitHub repository with complete code
- [ ] Docker configuration files
- [ ] Database schema documentation
- [ ] API endpoint documentation

---

## üåü Success Criteria

Your demo should clearly demonstrate:

‚úÖ **Microservice Development:** 3 independent services with CRUD operations  
‚úÖ **RESTful API:** Proper HTTP methods and JSON responses  
‚úÖ **Database Integration:** Firestore connectivity and data persistence  
‚úÖ **Containerization:** Docker and Docker Compose implementation  
‚úÖ **Cloud Deployment:** Public accessibility via ngrok  
‚úÖ **Professional UI:** Modern, responsive web interface  
‚úÖ **Documentation:** Comprehensive project documentation  

---

**Good luck with your CIA3 demo recording! üé¨‚ú®**

*This guide ensures you cover all assignment requirements while showcasing your technical expertise and project management skills.*
